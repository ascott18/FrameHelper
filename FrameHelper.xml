<Ui>

	<Frame name="FrameHelper_GenericBorder" virtual="true" parentKey="border" setAllPoints="true">
		<Size x="1" y="1"/>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="borderTop">
					<Size x="1" y="1"/>
				</Texture>
				<Texture parentKey="borderBottom">
					<Size x="1" y="1"/>
				</Texture>
				<Texture parentKey="borderLeft">
					<Size x="1" y="1"/>

					<Anchors>
						<Anchor point="TOPLEFT" relativeKey="$parent.borderTop" relativePoint="BOTTOMLEFT"/>
						<Anchor point="BOTTOMLEFT" relativeKey="$parent.borderBottom" relativePoint="TOPLEFT"/>
					</Anchors>
				</Texture>
				<Texture parentKey="borderRight">
					<Size x="1" y="1"/>
					<Anchors>
						<Anchor point="TOPRIGHT" relativeKey="$parent.borderTop" relativePoint="BOTTOMRIGHT"/>
						<Anchor point="BOTTOMRIGHT" relativeKey="$parent.borderBottom" relativePoint="TOPRIGHT"/>
					</Anchors>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnLoad>
				function self:SetSize(pixels)
					self.borderTop:ClearAllPoints()
					self.borderTop:SetPoint("TOPLEFT", -pixels, pixels)
					self.borderTop:SetPoint("TOPRIGHT", pixels, pixels)
					
					self.borderBottom:ClearAllPoints()
					self.borderBottom:SetPoint("BOTTOMLEFT", -pixels, -pixels)
					self.borderBottom:SetPoint("BOTTOMRIGHT", pixels, -pixels)

					for i, tex in ipairs{self:GetRegions()} do
						tex:SetSize(pixels, pixels)
					end
				end

				function self:SetColor(r, g, b, a)
					a = a or 1

					for i, tex in ipairs{self:GetRegions()} do
						tex:SetTexture(r, g, b, a)
					end
				end

				self:SetSize(1)
				self:SetColor(0, 0, 0, 1)
			</OnLoad>
		</Scripts>
	</Frame>

	<Frame name="FrameHelper_SimpleDialog" hidden="true" movable="true" toplevel="true" clampedToScreen="true" enableMouse="true" frameStrata="DIALOG" parent="UIParent" virtual="true">
		<Size x="330"/>

		<!-- Enables the whole frame for dragging -->
		<TitleRegion setAllPoints="true"/>

		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="background" texturesublevel="2">
					<Color r="0.05" g="0.05" b="0.05" a="0.995"/>
				</Texture>
			</Layer>

			<Layer level="ARTWORK">
				<Texture parentKey="HeaderBackground">
					<Color r="0.4" g="0.4" b="0.4" a="0.2"/>
					<Anchors>
						<Anchor point="TOPLEFT" y="-4"/>
						<Anchor point="BOTTOMRIGHT" relativePoint="TOPRIGHT" y="-24"/>
					</Anchors>
				</Texture>

				<FontString parentKey="title" inherits="GameFontNormal" justifyH="CENTER">
					<Anchors>
						<Anchor point="CENTER" relativeKey="$parent.HeaderBackground" y="0"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>

		<Frames>
			<Frame inherits="FrameHelper_GenericBorder">
			</Frame>

			<Button name="$parentClose" parentKey="CloseButton" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="CENTER" relativePoint="TOPRIGHT" x="-14" y="-14"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:SetFrameLevel(self:GetFrameLevel() + 2)
					</OnLoad>
					<OnClick>
						self:GetParent():Hide()
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
	</Frame>

	<Texture name="FrameHelper_InputBoxTemplateBorder" virtual="true">
		<Size x="1" y="1"/>
		<Color r="0.4" g="0.4" b="0.4" a="1"/>
	</Texture>
	<EditBox name="FrameHelper_InputBoxTemplate" enableMouse="true" virtual="true" autoFocus="false">
		<Size x="100" y="15"/>

		<HitRectInsets left="-1" right="-1" top="-1" bottom="-1" />
		<TextInsets>
			<AbsInset left="2" right="2" top="2" bottom="2"/>
		</TextInsets>
		<Layers>
			<Layer level="BACKGROUND">
				
				<Texture parentKey="borderTop">
					<Size x="1" y="1"/>
					<Color r="0.4" g="0.4" b="0.4" a="1"/>

					<Anchors>
						<Anchor point="TOPLEFT" x="-2"/>
						<Anchor point="TOPRIGHT"/>
					</Anchors>
				</Texture>
				<Texture parentKey="borderBottom">
					<Size x="1" y="1"/>
					<Color r="0.4" g="0.4" b="0.4" a="1"/>

					<Anchors>
						<Anchor point="BOTTOMLEFT" x="-2" y="-1"/>
						<Anchor point="BOTTOMRIGHT" y="-1"/>
					</Anchors>
				</Texture>
				<Texture parentKey="borderLeft">
					<Size x="1" y="1"/>
					<Color r="0.4" g="0.4" b="0.4" a="1"/>

					<Anchors>
						<Anchor point="TOPLEFT" relativeKey="$parent.borderTop" relativePoint="BOTTOMLEFT"/>
						<Anchor point="BOTTOMLEFT" relativeKey="$parent.borderBottom" relativePoint="TOPLEFT"/>
					</Anchors>
				</Texture>
				<Texture parentKey="borderRight">
					<Size x="1" y="1"/>
					<Color r="0.4" g="0.4" b="0.4" a="1"/>

					<Anchors>
						<Anchor point="TOPRIGHT" relativeKey="$parent.borderTop" relativePoint="BOTTOMRIGHT"/>
						<Anchor point="BOTTOMRIGHT" relativeKey="$parent.borderBottom" relativePoint="TOPRIGHT"/>
					</Anchors>
				</Texture>
				
				<Texture parentKey="background">
					<Color r="0" g="0" b="0" a="1"/>
					<Anchors>
						<Anchor point="TOPLEFT" relativeKey="$parent.borderLeft" relativePoint="TOPRIGHT"/>
						<Anchor point="BOTTOMRIGHT" relativeKey="$parent.borderRight" relativePoint="BOTTOMLEFT"/>
					</Anchors>
				</Texture>
			</Layer>
			<Layer level="OVERLAY">
				<FontString parentKey="BackgroundText" justifyH="CENTER" wordwrap="false" inherits="GameFontHighlightSmall">
					<Color r="0.5" g="0.5" b="0.5"/>
					<Anchors>
						<Anchor point="LEFT"/>
						<Anchor point="RIGHT"/>
					</Anchors>
				</FontString>
				<FontString parentKey="text" inherits="GameFontNormalSmall" justifyH="CENTER" justifyV="BOTTOM">
					<Anchors>
						<Anchor point="BOTTOM" relativePoint="TOP" y="1"/>
						<Anchor point="LEFT" x="-5"/>
						<Anchor point="RIGHT" x="5"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
			<OnEscapePressed>
				EditBox_ClearFocus(self)
				self:GetScript("OnTextChanged")(self)
			</OnEscapePressed>
			<OnEditFocusLost>
				EditBox_ClearHighlight(self)
				self:GetScript("OnTextChanged")(self)
			</OnEditFocusLost>
			<OnEditFocusGained>
				EditBox_HighlightText(self)
				self.BackgroundText:SetText(nil)
			</OnEditFocusGained>
			<OnEnterPressed>
				if self:IsMultiLine() and IsModifierKeyDown() then
					self:Insert("\r\n")
				else
					self:ClearFocus()
				end
			</OnEnterPressed>
			<OnTextChanged>
				local text = self:GetText()
				if text == "" then
					self.BackgroundText:SetText(self.label)
				else
					self.BackgroundText:SetText(nil)
				end
			</OnTextChanged>
		</Scripts>
		<FontString inherits="GameFontHighlight"/>
	</EditBox>
	
	<Button name="FrameHelper_ButtonTemplate" virtual="true">
		<Size x="144" y="15"/>
		
		<NormalFont style="GameFontNormal"/>
		<HighlightFont style="GameFontHighlight"/>
		<DisabledFont style="GameFontDisable"/>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="borderTop" inherits="FrameHelper_InputBoxTemplateBorder">
					<Anchors>
						<Anchor point="TOPLEFT" x="0" y="1"/>
						<Anchor point="TOPRIGHT" y="1"/>
					</Anchors>
				</Texture>
				<Texture parentKey="borderBottom" inherits="FrameHelper_InputBoxTemplateBorder">
					<Anchors>
						<Anchor point="BOTTOMLEFT" x="0" y="0"/>
						<Anchor point="BOTTOMRIGHT" y="0"/>
					</Anchors>
				</Texture>
				<Texture parentKey="borderLeft" inherits="FrameHelper_InputBoxTemplateBorder">
					<Anchors>
						<Anchor point="TOPLEFT" relativeKey="$parent.borderTop" relativePoint="BOTTOMLEFT"/>
						<Anchor point="BOTTOMLEFT" relativeKey="$parent.borderBottom" relativePoint="TOPLEFT"/>
					</Anchors>
				</Texture>
				<Texture parentKey="borderRight" inherits="FrameHelper_InputBoxTemplateBorder">
					<Anchors>
						<Anchor point="TOPRIGHT" relativeKey="$parent.borderTop" relativePoint="BOTTOMRIGHT"/>
						<Anchor point="BOTTOMRIGHT" relativeKey="$parent.borderBottom" relativePoint="TOPRIGHT"/>
					</Anchors>
				</Texture>
				
				<Texture parentKey="Background">
					<Color r="0.15" g="0.15" b="0.15" a="0.5"/>
					<Anchors>
						<Anchor point="TOPLEFT" relativeKey="$parent.borderLeft" relativePoint="TOPRIGHT"/>
						<Anchor point="BOTTOMRIGHT" relativeKey="$parent.borderRight" relativePoint="BOTTOMLEFT"/>
					</Anchors>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnable>
				self:SetAlpha(1)
			</OnEnable>
			<OnDisable>
				self:SetAlpha(0.7)
			</OnDisable>
		</Scripts>
	</Button>

	<ScrollFrame name="FrameHelper_ScrollFrameTemplate" parentKey="ScrollFrame" virtual="true">
		<Scripts>
			<OnLoad>
				self.edgeScrollMouseCursorRange = 5
				self.edgeScrollScrollDistancePerSecond = 150
				self.scrollPercentage = 1/2
			</OnLoad>
			<OnScrollRangeChanged>
				local yrange = self:GetVerticalScrollRange()

				if floor(yrange) == 0 then
					self.ScrollBar:Hide()
				else
					self.ScrollBar:Show()
				end

				if 0 >= self:GetVerticalScroll() then
					self:SetVerticalScroll(0)
				elseif self:GetVerticalScroll() > yrange then
					self:SetVerticalScroll(yrange)
				end

				local height = self:GetHeight()
				self.percentage = height/(yrange+height)

				self.ScrollBar.Thumb:SetHeight(max(height*self.percentage, 15))

				self.ScrollBar.Thumb:SetPoint("TOP", self, "TOP", 0, -(self:GetVerticalScroll()*self.percentage))
			</OnScrollRangeChanged>
		  
			<OnVerticalScroll>			
				self.ScrollBar.Thumb:SetPoint("TOP", self, "TOP", 0, -(offset*self.percentage))

			</OnVerticalScroll>
			<OnMouseWheel>
				local scrollStep = self.scrollStep or self:GetHeight() * self.scrollPercentage
				local newScroll
				if ( delta > 0 ) then
					newScroll = self:GetVerticalScroll() - scrollStep
				else
					newScroll = self:GetVerticalScroll() + scrollStep
				end
				if 0 > newScroll then
					newScroll = 0
				elseif newScroll > self:GetVerticalScrollRange() then
					newScroll = self:GetVerticalScrollRange()
				end
				self:SetVerticalScroll(newScroll)
			</OnMouseWheel>
			
			<OnUpdate>
				if self.AllowEdgeScrolling then
					local scale = self:GetEffectiveScale()
					local self_top, self_bottom = self:GetTop()*scale, self:GetBottom()*scale
					
					local _, cursorY = GetCursorPosition()
					
					local absDistance_top = abs(self_top - cursorY)
					local absDistance_bottom = abs(self_bottom - cursorY)
					
					local scrollStep
					if absDistance_top > absDistance_bottom then
						-- We are closer to the bottom of the frame
						if self.edgeScrollMouseCursorRange > absDistance_bottom then
							scrollStep = -self.edgeScrollScrollDistancePerSecond*elapsed
						end
					else
						-- We are closer to the top of the frame
						if self.edgeScrollMouseCursorRange > absDistance_top then
							scrollStep = self.edgeScrollScrollDistancePerSecond*elapsed
						end
					end
				
					if scrollStep then
						local newScroll = self:GetVerticalScroll() - scrollStep
						
						if 0 > newScroll then
							newScroll = 0
						elseif newScroll > self:GetVerticalScrollRange() then
							newScroll = self:GetVerticalScrollRange()
						end
						self:SetVerticalScroll(newScroll)
					end
				end
			</OnUpdate>
			<OnSizeChanged>
				-- container's width doesn't get adjusted as we resize. Fix this.
			    self.container:SetWidth(self:GetWidth())
			</OnSizeChanged>
		</Scripts>
		<Frames>
			<Frame name="$parentScrollBar" parentKey="ScrollBar" hidden="true">
				<Size x="10"/>
				<Anchors>
					<Anchor point="TOP"/>
					<Anchor point="BOTTOM"/>
				</Anchors>
				<Layers>
					<Layer level="BACKGROUND">
						<Texture name="$parentBackdrop" setAllPoints="true" parentKey="Backdrop" >
							<Color r="0.15" g="0.15" b="0.15" a="1"/>
					
							<Gradient orientation="HORIZONTAL">
								<MinColor r="1" g="1" b="1" a="1"/>
								<MaxColor r="0.6" g="0.6" b="0.6" a="1"/>
							</Gradient>
						</Texture>
					</Layer>
				</Layers>
				
				<Frames>
					<Button name="$parentThumb" parentKey="Thumb" >
						<Anchors>
							<Anchor point="LEFT"/>
							<Anchor point="RIGHT"/>
						</Anchors>
						
						<NormalTexture setAllPoints="true">
							<Color r="0.6" g="0.6" b="0.6" a="1"/>
							
							<Gradient orientation="HORIZONTAL">
								<MinColor r="1" g="1" b="1" a="1"/>
								<MaxColor r="0.6" g="0.6" b="0.6" a="1"/>
							</Gradient>
						</NormalTexture>
						<HighlightTexture setAllPoints="true" alpha="0.25">
							<Color r=".1" g="1" b="1"/>
						</HighlightTexture>
						<PushedTexture setAllPoints="true" >
							<Color r="0.8" g="0.8" b="0.8" a="1"/>
							
							<Gradient orientation="HORIZONTAL">
								<MinColor r="1" g="1" b="1" a="1"/>
								<MaxColor r="0.6" g="0.6" b="0.6" a="1"/>
							</Gradient>
						</PushedTexture>
						
						<Layers>
							<Layer level="OVERLAY">							
								<Texture parentKey="tick1">
									<Color r="0.2" g="0.2" b="0.2"/>
									<Size y="1"/>
					
									<Anchors>
										<Anchor point="LEFT" x="1"/>
										<Anchor point="RIGHT" x="-1"/>
									</Anchors>
								</Texture>
								<Texture>
									<Color r="0.2" g="0.2" b="0.2"/>
									<Size y="1"/>
									<Anchors>
										<Anchor point="LEFT" x="1"/>
										<Anchor point="RIGHT" x="-1"/>
										<Anchor point="BOTTOM" relativeKey="$parent.tick1" relativePoint="TOP" y="2"/>
									</Anchors>
								</Texture>
								
								<Texture>
									<Color r="0.2" g="0.2" b="0.2"/>
									<Size y="1"/>
					
									<Anchors>
										<Anchor point="LEFT" x="1"/>
										<Anchor point="RIGHT" x="-1"/>
										<Anchor point="TOP" relativeKey="$parent.tick1" relativePoint="BOTTOM" y="-2"/>
									</Anchors>
								</Texture>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:RegisterForDrag("LeftButton")
							</OnLoad>
							<OnDragStart>
								local _
								self.IsScrolling = true
								_, self.startY = GetCursorPosition()
								self.startHeight = select(5, self:GetPoint(1))
								self:SetButtonState("PUSHED")
								self:LockHighlight()
							</OnDragStart>
							<OnDragStop>
								self.IsScrolling = false
								self:SetButtonState("NORMAL")
								self:UnlockHighlight()
							</OnDragStop>
							<OnUpdate>
								if self.IsScrolling then
									local _, currentY = GetCursorPosition()
									local delta = (currentY - self.startY)/self:GetEffectiveScale()
									
									local ScrollFrame = self:GetParent():GetParent()
									
									
									local maxTop = -(ScrollFrame:GetHeight() - self:GetHeight())
									local minTop = 0
									
									local newTop = (self.startHeight + delta)
									if maxTop > newTop then
										newTop = maxTop
									elseif newTop > minTop then
										newTop = minTop
									end
									
									ScrollFrame:SetVerticalScroll(-(newTop/ScrollFrame.percentage))
									self:SetPoint("TOP", ScrollFrame, "TOP", 0, newTop)
								end
							</OnUpdate>
						</Scripts>
					
					</Button>
				</Frames>
				<Scripts>
					<OnMouseWheel>
						self:GetParent():GetScript("OnMouseWheel")(self:GetParent(), delta)
					</OnMouseWheel>
					<OnMouseDown>
						local delta
						local _, y = GetCursorPosition()
						if self.Thumb:GetBottom()*self:GetEffectiveScale() > y then
							delta = -1
						elseif y > self.Thumb:GetTop()*self:GetEffectiveScale() then
							delta = 1
						end
						
						self:GetParent():GetScript("OnMouseWheel")(self:GetParent(), delta)
					</OnMouseDown>
				</Scripts>
			</Frame>
		</Frames>
	</ScrollFrame>

	<CheckButton name="FrameHelper_CheckTemplate" virtual="true">
		<Size x="30" y="30"/>
		
        <Layers>
			<Layer level="ARTWORK">
				<FontString parentKey="text" justifyH="LEFT" inherits="GameFontHighlightSmall">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT" x="-2"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<Button parentKey="clickinterceptor">
				<Scripts>
					<OnLoad>
						self.parent = self:GetParent()
						self:SetAllPoints(self.parent.text)
					</OnLoad>
					<OnEnter>
						if not self.parent:IsEnabled() and not self.parent:GetMotionScriptsWhileDisabled() then
							return
						end
						
						self.parent:LockHighlight()
						
						local OnEnter = self.parent:GetScript("OnEnter")
						if OnEnter then
							OnEnter(self.parent)
						end
					</OnEnter>
					<OnLeave>
						self.parent:UnlockHighlight()
						
						local OnLeave = self.parent:GetScript("OnLeave")
						if OnLeave then
							OnLeave(self.parent)
						end
					</OnLeave>
					<OnClick>
						if not self.parent:IsEnabled() then return end
						
						self.parent:Click(button)
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
		<Scripts>
			<OnEnable>
				self:SetAlpha(1)
			</OnEnable>
			<OnDisable>
				self:SetAlpha(0.4)
			</OnDisable>
			<OnEnter>
				self:LockHighlight()
			</OnEnter>
			<OnLeave>
				self:UnlockHighlight()
			</OnLeave>
		</Scripts>
		<NormalTexture urgency="5" file="Interface\Buttons\UI-CheckBox-Up"/>
		<PushedTexture urgency="5" file="Interface\Buttons\UI-CheckBox-Down"/>
		<HighlightTexture urgency="5" file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD"/>
		<CheckedTexture urgency="5" file="Interface\Buttons\UI-CheckBox-Check"/>
		<DisabledCheckedTexture urgency="5" file="Interface\Buttons\UI-CheckBox-Check-Disabled"/>
	</CheckButton>


	<Frame name="FrameHelper_BorderedFrame" virtual="true">
		<Backdrop edgeFile="Interface\DialogFrame\UI-DialogBox-Background-Dark" tile="true">
			<EdgeSize>
				<AbsValue val="0.5"/>
			</EdgeSize>
		</Backdrop>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="Background" setAllPoints="true">
					<Color r="1" g="1" b="1" a="1"/>
					
					<Gradient orientation="VERTICAL">
						<MinColor r="1" g="1" b="1" a="0.05"/>
						<MaxColor r="1" g="1" b="1" a="0.10"/>
					</Gradient>
				</Texture>
			</Layer>
		</Layers>
	</Frame>

	<Slider name="FrameHelper_SliderTemplate" orientation="HORIZONTAL" virtual="true" enableMouse="true">
		<Size x="100" y="17"/>

		<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
			<EdgeSize>
				<AbsValue val="8"/>
			</EdgeSize>
			<TileSize>
				<AbsValue val="8"/>
			</TileSize>
			<BackgroundInsets>
				<AbsInset left="3" right="3" top="6" bottom="6"/>
			</BackgroundInsets>
		</Backdrop>
		<HitRectInsets left="0" right="0" top="-1" bottom="-4" />
		<Layers>
			<Layer level="ARTWORK">
				<FontString parentKey="text" inherits="GameFontHighlightSmall" justifyH="CENTER" justifyV="BOTTOM">
					<Anchors>
						<Anchor point="BOTTOM" relativePoint="TOP" y="-1"/>
						<Anchor point="LEFT" x="-5"/>
						<Anchor point="RIGHT" x="5"/>
					</Anchors>
				</FontString>
				<FontString inherits="GameFontHighlightSmall" parentKey="Low" text="LOW">
					<Anchors>
						<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" x="-4" y="3"/>
					</Anchors>
				</FontString>
				<FontString parentKey="Mid" inherits="GameFontHighlightSmall" text="">
					<Anchors>
						<Anchor point="TOP" relativePoint="BOTTOM" y="3"/>
					</Anchors>
				</FontString>
				<FontString inherits="GameFontHighlightSmall" parentKey="High" text="HIGH">
					<Anchors>
						<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" x="4" y="3"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
			<Size x="32" y="32"/>
		</ThumbTexture>
	</Slider>



	<Frame name="FrameHelper_PointTemplate" inherits="FrameHelper_BorderedFrame" virtual="true">
		<Size y="80"/>
		<Anchors>
			<Anchor point="LEFT" x="3"/>
			<Anchor point="RIGHT" x="-3" />
		</Anchors>
		<Frames>
			<Frame name="$parentPoint" inherits="UIDropDownMenuTemplate" parentKey="Point">
				<Anchors>
					<Anchor point="TOP" y="-9"/>
					<Anchor point="LEFT" x="10" />
				</Anchors>
			</Frame>

			<Frame name="$parentRelativePoint" inherits="UIDropDownMenuTemplate" parentKey="RelativePoint">
				<Anchors>
					<Anchor point="TOP" y="-9"/>
					<Anchor point="RIGHT" x="8" />
				</Anchors>
			</Frame>

			<EditBox inherits="FrameHelper_InputBoxTemplate" parentKey="RelativeTo">
				<Anchors>
					<Anchor point="LEFT" relativeKey="$parent.Point" relativePoint="RIGHT" x="-8" y="1"/>
					<Anchor point="RIGHT" relativeKey="$parent.RelativePoint" relativePoint="LEFT" x="8" y="1"/>
				</Anchors>
			</EditBox>

			<Slider inherits="FrameHelper_SliderTemplate" parentKey="X">
				<Anchors>
					<Anchor point="TOPLEFT" relativeKey="$parent.Point" relativePoint="BOTTOMLEFT" x="0" y="-8"/>
				</Anchors>
			</Slider>
			<Slider inherits="FrameHelper_SliderTemplate" parentKey="Y">
				<Anchors>
					<Anchor point="LEFT" relativeKey="$parent.X" relativePoint="RIGHT" x="20" />
				</Anchors>
			</Slider>


			<Button parentKey="Remove" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="CENTER" relativePoint="TOPLEFT" x="14" y="-14"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:SetFrameLevel(self:GetFrameLevel() + 2)
						self:SetScale(0.75)
					</OnLoad>
					<OnClick>
						self:GetParent():RemoveAnchor()
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
	</Frame>

	<Frame name="FrameHelper_AddAnchor" inherits="FrameHelper_BorderedFrame" virtual="true">
		<Size y="35"/>
		<Anchors>
			<Anchor point="LEFT" x="3"/>
			<Anchor point="RIGHT" x="-3" />
		</Anchors>
		<Frames>
			<Frame name="$parentPoint" inherits="UIDropDownMenuTemplate" parentKey="Point">
				<Anchors>
					<Anchor point="TOP" y="-4"/>
					<Anchor point="LEFT" x="10" />
				</Anchors>
			</Frame>
		</Frames>
	</Frame>

	<Button name="FrameHelper_ResizeButton" parentKey="resizeButton" virtual="true">
		<Size x="10" y="10"/>
		<Anchors>
			<Anchor point="BOTTOMRIGHT" x="3" y="-3"/>
		</Anchors>
		<HitRectInsets left="3" right="0" top="3" bottom="0" />
		<Layers>
			<Layer level="BACKGROUND">
				<!-- TODO: THIS TEXTURE NEEDS TO BE INDEPENDENT -->
				<Texture parentKey="texture" file="Interface\AddOns\TellMeWhen\Textures\Resize">
					<Size x="10" y="10"/>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnLoad>
				self.texture:SetVertexColor(0.6, 0.6, 0.6)
			</OnLoad>
			<OnEnter>
				self.texture:SetVertexColor(1, 1, 1)
			</OnEnter>
			<OnLeave>
				self.texture:SetVertexColor(0.6, 0.6, 0.6)
			</OnLeave>
		</Scripts>
	</Button>


	<Frame name="FrameHelper_Editor" hidden="true" movable="true" clampedToScreen="true" enableMouse="true" enableKeyboard="true" propagateKeyboardInput="true" frameStrata="DIALOG" inherits="FrameHelper_SimpleDialog">
		<Size x="650" y="500"/>
		<Anchors>
			<Anchor point="CENTER" relativeTo="UIParent"/>
			<Anchor point="TOP" relativeTo="UIParent" y="-60"/>
		</Anchors>

		<Frames>

			<Frame name="$parentMain" parentKey="Main" >
				<Anchors>
					<Anchor point="TOPLEFT" y="-25"/>
					<Anchor point="BOTTOMRIGHT" x="-10" y="1"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						FrameHelper:ConvertContainerToScrollFrame(self, true, -2)
					</OnLoad>
				</Scripts>
			</Frame>

			<Button parentKey="LoadParent" inherits="FrameHelper_ButtonTemplate">
				<Anchors>
					<Anchor point="LEFT" relativeKey="$parent.HeaderBackground" x="5"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:SetText("Load Parent")
						self:SetWidth(self:GetTextWidth() + 10)
						self.__noWrapTooltipText = 1
						FrameHelper:TT(self, "Load Parent", function(self)
							if not FrameHelper.CF or not FrameHelper.CF:GetParent() then
								return ""
							end
							return FrameHelper:GenerateFramePathString(FrameHelper.CF:GetParent())
						end, 1, 1)
					</OnLoad>
					<OnClick>
						FrameHelper:Load(FrameHelper.CF:GetParent())
						FrameHelper:TT_Update(self)
					</OnClick>
					<OnUpdate>
						if FrameHelper.CF and FrameHelper.CF:GetParent() then
							self:Enable()
						else
							self:Disable()
						end
					</OnUpdate>
				</Scripts>
			</Button>

			<Button name="$parentLoadChild" parentKey="LoadChild" inherits="FrameHelper_ButtonTemplate">
				<Anchors>
					<Anchor point="CENTER" relativeKey="$parent.HeaderBackground" />
					<Anchor point="RIGHT" relativeKey="$parent.CloseButton" relativePoint="LEFT" x="0"/>
				</Anchors>
				<Frames>

					<Frame name="$parentDD" inherits="UIDropDownMenuTemplate" parentKey="DD" hidden="true">
						<Anchors>
							<Anchor point="LEFT" relativePoint="RIGHT" x="-15" y="-4"/>
						</Anchors>
					</Frame>
				</Frames>
				<Scripts>
					<OnLoad>
						FrameHelper.C.Config_DropDownMenu_FramePicker:NewFromExisting(self.DD)
						self.DD:SetIncludeParent(true)


						self:SetText("Load Child...")
						self:SetWidth(self:GetTextWidth() + 10)
					</OnLoad>
					<OnClick>
						self.DD:ShowForRootFrame(FrameHelper.CF, self)
					</OnClick>
					<OnUpdate>
						if FrameHelper.CF and FrameHelper.CF:IsObjectType("Frame") then
							self:Enable()
						else
							self:Disable()
						end
					</OnUpdate>
				</Scripts>
			</Button>


		</Frames>
		<Scripts>
			<OnLoad>
				self.title:SetPoint("LEFT", self.LoadParent, "RIGHT", 5, 0)
				self.title:SetPoint("RIGHT", self.LoadChild, "LEFT", -5, 0)

				self.resizer = FrameHelper.C.Resizer_Generic:New(self)
				self.resizer:Show()
				self.resizer.scale_min = 0.4
				self.resizer.y_min = 400
				self.resizer.y_max = 1200
				self.resizer:SetModes(self.resizer.MODE_SCALE, self.resizer.MODE_SIZE)

			</OnLoad>
		</Scripts>

	</Frame>
</Ui>